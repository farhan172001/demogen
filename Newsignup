import React, { useState } from "react";
import axios from "axios";

export default function SignUpPage() {
  const [form, setForm] = useState({
    firstName: '',
    lastName: '',
    phone: '',
    company: '',
    jobRole: '',
    email: '',
    username: '',
    password: ''
  });

  const [message, setMessage] = useState('');
  const [isLoading, setIsLoading] = useState(false);

  const handleChange = (e) => {
    setForm({ ...form, [e.target.name]: e.target.value });
  };

  const handleSignup = async (e) => {
    e.preventDefault();
    setIsLoading(true);
    try {
      await axios.post('/api/signup', form);
      setMessage('Account created successfully! Redirecting to login...');
      setTimeout(() => {
        window.location.href = '/login';
      }, 1500);
    } catch (err) {
      setMessage('Signup failed. User may already exist.');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50 flex items-center justify-center p-4">
      <div className="w-full max-w-md bg-white p-8 rounded-2xl shadow-lg border border-gray-200">
        <h1 className="text-3xl font-bold text-gray-900 text-center mb-6">Sign Up</h1>

        {message && (
          <div className={`mb-6 p-4 rounded-lg text-center ${
            message.includes('successfully') 
              ? 'bg-green-50 text-green-700 border border-green-200' 
              : 'bg-red-50 text-red-700 border border-red-200'
          }`}>
            {message}
          </div>
        )}

        <form onSubmit={handleSignup} className="space-y-5">
          {[
            { name: "firstName", label: "First Name" },
            { name: "lastName", label: "Last Name" },
            { name: "phone", label: "Phone Number" },
            { name: "company", label: "Company Name" },
            { name: "jobRole", label: "Job Role" },
            { name: "email", label: "Email Address", type: "email" },
            { name: "username", label: "Username" },
            { name: "password", label: "Password", type: "password" }
          ].map(({ name, label, type = "text" }) => (
            <div key={name} className="relative">
              <input
                type={type}
                name={name}
                value={form[name]}
                onChange={handleChange}
                placeholder=" "
                required
                className="peer w-full px-4 pt-6 pb-2 text-gray-900 placeholder-transparent border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
              <label
                htmlFor={name}
                className="absolute left-4 top-2 text-sm text-gray-600 transition-all peer-placeholder-shown:top-5 peer-placeholder-shown:text-base peer-placeholder-shown:text-gray-400 peer-focus:top-2 peer-focus:text-sm peer-focus:text-blue-600 bg-white px-1"
              >
                {label}
              </label>
            </div>
          ))}

          <button
            type="submit"
            disabled={isLoading}
            className={`w-full py-3 mt-2 rounded-lg text-white font-semibold shadow transition-all ${
              isLoading
                ? 'bg-gray-400 cursor-not-allowed'
                : 'bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 hover:scale-[1.01] active:scale-95'
            }`}
          >
            {isLoading ? (
              <div className="flex items-center justify-center">
                <div className="animate-spin h-5 w-5 border-b-2 border-white mr-2 rounded-full"></div>
                Creating Account...
              </div>
            ) : (
              "Create Account"
            )}
          </button>
        </form>
      </div>
    </div>
  );
}
