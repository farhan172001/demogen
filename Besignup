const express = require('express');
const bodyParser = require('body-parser');
const cors = require('cors');
const jwt = require('jsonwebtoken');

const app = express();
const PORT = 3001;
const SECRET = '8K0yqdGBgpGwoKxiwbYiGTpBrEO';
const HUB_URL = 'https://developer.huntington.com/mobile-login';

app.use(cors());
app.use(bodyParser.json());

// In-memory user store
const users = [];

// SIGNUP ROUTE
app.post('/api/signup', (req, res) => {
  const {
    firstName,
    lastName,
    phone,
    company,
    jobRole,
    email,
    username,
    password
  } = req.body;

  if (!email || !password || !firstName || !lastName || !username) {
    return res.status(400).json({ message: 'Missing required fields' });
  }

  const exists = users.find((u) => u.email === email || u.username === username);
  if (exists) return res.status(409).json({ message: 'User already exists' });

  const newUser = {
    id: users.length + 1,
    firstName,
    lastName,
    phone,
    company,
    jobRole,
    email,
    username,
    password
  };

  users.push(newUser);

  // Optional: log to verify
  console.log("User registered:", newUser);

  // Redirect to login URL
  res.status(201).json({
    message: 'User created successfully',
    redirect: '/login'
  });
});

// LOGIN ROUTE
app.post('/api/login', (req, res) => {
  const { email, password } = req.body;

  const user = users.find((u) => u.email === email && u.password === password);
  if (!user) return res.status(401).json({ message: 'Invalid credentials' });

  const payload = {
    email: user.email,
    allowedProjects: ['huntington-2'],
    redirect_url: '/internal',
    api_key: 'api-key-12345-1',
    version: 1
  };

  const auth_token = jwt.sign(payload, SECRET);

  const url = new URL(HUB_URL);
  url.searchParams.set('auth_token', auth_token);

  res.json({ auth_token, url: url.toString() });
});

// Start server
app.listen(PORT, () => {
  console.log(`âœ… Server running on http://localhost:${PORT}`);
});




// new fe
const handleSignup = async (e) => {
  e.preventDefault();

  const newErrors = {};
  Object.keys(form).forEach(field => {
    const error = validateField(field, form[field]);
    if (error) newErrors[field] = error;
  });

  if (Object.keys(newErrors).length > 0) {
    setErrors(newErrors);
    return;
  }

  setIsLoading(true);
  setErrors({});
  setMessage('');

  try {
    // Hit backend signup endpoint
    const response = await axios.post('/api/signup', form);

    if (response.status === 201) {
      setMessage('Account created successfully! Redirecting to login...');
      setTimeout(() => {
        window.location.href = '/login';
      }, 1500);
    }
  } catch (err) {
    if (err.response?.status === 409) {
      setMessage('Signup failed. User already exists.');
    } else {
      setMessage('Signup failed. Please try again later.');
    }
  } finally {
    setIsLoading(false);
  }
};
